/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: Addition to OpenFOAM v6
   \\    /   O peration     | Website:  https://github.com/StasF1/dualFuelEngine
    \\  /    A nd           | Version:  0.3-alpha
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0]; // [kg m s K kg-mol cd]

internalField   uniform (0 0 0);

injection       150;

inlet           75;

injMinus        #calc "-1.0*$injection";

inletMinus      #calc "-1.0*$inlet";

boundaryField
{
    // Injection
    injectionXMinus
    {
        type    fixedValue;
        value   uniform ($injMinus 0 0);
        // type    codedFixedValue;
        // value   uniform ($injMinus 0 0);
        // redirectType UInjectionXMinus;
        // code
        // #{
        //     vector directionU(-0.5, 0, 0);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }
    injectionXPlus
    {
        type    fixedValue;
        value   uniform ($injection 0 0);
        // type    codedFixedValue;
        // value   uniform ($injection 0 0);
        // redirectType UInjectionXPlus;
        // code
        // #{
        //     vector directionU(0.5, 0, 0);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }
    injectionYMinus
    {
        type    fixedValue;
        value   uniform (0 $injMinus 0);
        // type    codedFixedValue;
        // value   uniform (0 $injMinus 0);
        // redirectType UInjectionYMinus;
        // code
        // #{
        //     vector directionU(0, -0.5, 0);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }
    injectionYPlus
    {
        type    fixedValue;
        value   uniform (0 $injection 0);
        // type    codedFixedValue;
        // value   uniform (0 $injection 0);
        // redirectType UInjectionYPlus;
        // code
        // #{
        //     vector directionU(0, 0.5, 0);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }

    // Inlet
    inletXMinus
    {
        type    fixedValue;
        value   uniform ($inletMinus 0 $inlet);
        // type    codedFixedValue;
        // value   uniform ($inletMinus 0 $inlet);
        // redirectType UInletXMinus;
        // code
        // #{
        //     vector directionU(-0.5, 0, 0.5);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }
    inletXPlus
    {
        type    fixedValue;
        value   uniform ($inlet 0 $inlet);
        // type    codedFixedValue;
        // value   uniform ($inlet 0 $inlet);
        // redirectType UInletXPlus;
        // code
        // #{
        //     vector directionU(0.5, 0, 0.5);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }
    inletYMinus
    {
        type    fixedValue;
        value   uniform (0 $inletMinus $inlet);
        // type    codedFixedValue;
        // value   uniform (0 $inletMinus $inlet);
        // redirectType UInletYMinus;
        // code
        // #{
        //     vector directionU(0, -0.5, 0.5);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }
    inletYPlus
    {
        type    fixedValue;
        value   uniform (0 $inlet $inlet);
        // type    codedFixedValue;
        // value   uniform (0 $inlet $inlet);
        // redirectType UInletYPlus;
        // code
        // #{
        //     vector directionU(0, 0.5, 0.5);
        //     #include "../../constant/transportProperties.H"
        //     #include "../../../../../solvers/utilities/codedFixedValueBC/U.C"
        // #};
    }

    // Outlet
    outlet
    {
        type    zeroGradient;
    }
    
    // Walls
    "piston|valve|walls"
    {
        type    slip;
    }
}

// ************************************************************************* //
