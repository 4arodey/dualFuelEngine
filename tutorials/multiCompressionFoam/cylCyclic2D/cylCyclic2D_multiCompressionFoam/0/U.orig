/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: dualFuelEngline addition to OpenFOAM v7
   \\    /   O peration     | Website:  https://github.com/StasF1/dualFuelEngine
    \\  /    A nd           | Version:  0.4-alpha
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

injection       100; // Injection velocity magnitude

inlet           50; // Inlet velocity magnitude

inlRAngle       25; // Inlet port radius angle, deg

inlZAngle       10; // Inlet port Z angle, deg

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

inletX     #calc "-1*$inlet*cos(degToRad($inlRAngle))*cos(degToRad($inlZAngle))";

inletY     #calc "$inlet*sin(degToRad($inlRAngle))*cos(degToRad($inlZAngle))";

inletZ     #calc "$inlet*sin(degToRad($inlZAngle))";

boundaryField
{
/* Inlet */
    injection
    {
        type            uniformFixedValue;
        // uniformValue    constant (#neg $injection 0 0);
        uniformValue    table
        (
            (0.25       (0               0 0))
            (0.26       (#neg $injection 0 0))
            (0.36       (#neg $injection 0 0))
            (0.37       (0               0 0))
        );
    }
    inlet
    {
        type            uniformFixedValue;
        // uniformValue    constant ($inletX $inletY $inletZ);
        uniformValue    table
        (
            (0.072      (0       0       0))
            (0.075      ($inletX $inletY $inletZ))
            (0.215      ($inletX $inletY $inletZ))
            (0.216      (0       0       0))
        );
    }

/* Outlet */
    outlet
    {
        type            pressureInletOutletVelocity;
        value           uniform (0 0 0);
    }

/* Walls */
    "piston|valveHead"
    {
        type            movingWallVelocity;
        value           $internalField;
    }
    "valveStem|walls"
    {
        type            slip;
    }

/* ACMI & cyclic patches */
    #includeEtc "caseDicts/setConstraintTypes"

    "(inner|outer)ACMI(1|2)_blockage"
    {
        type            slip;
    }
    "(inner|outer)ACMI(1|2)_couple"
    {
        type            cyclicACMI;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
